package ML.DataUtils

import org.apache.spark.{SparkConf, SparkContext}

object DataSimulator{

  //LibSVM格式
  def main(args: Array[String]): Unit = {

//    val out = new PrintWriter("D:\\RFData1.txt")
//    for(i <- 1 to 100){
//      out.print(
//        (100 + 20*(new util.Random).nextFloat()).toString.substring(0, 5) + " " +
//        "1:" + (30 + 3*(new util.Random).nextFloat()).toString.substring(0, 4) + " " +
//        "2:" + (730 + 40*(new util.Random).nextFloat()).toString.substring(0, 5) + " " +
//        "3:" + (210 + 20*(new util.Random).nextFloat()).toString.substring(0, 5) + " " +
//        "4:" + (570 + 15*(new util.Random).nextFloat()).toString.substring(0, 5) + " " +
//        "5:" + (81 + 18*(new util.Random).nextFloat()).toString.substring(0, 4) + " " + "\r\n"
//      )


//    val out = new PrintWriter("D:\\preData1.txt")
//    for(i <- 1 to 100){
//      out.print(
//        (70 + 70*(new util.Random).nextFloat()).toString.substring(0, 6) + " ")
//    }
//
//    out.close()

    val conf = new SparkConf()
      .setAppName("Flume_Kafka_Streaming")
      .setMaster("local")
      .set("spark.executor.memory", "512m")

    val sc = new SparkContext(conf)

    //val data = sc.textFile("D:\\preData1.txt")
    val data = "87.675507\t87.675507\t87.98752\t88.396315\t88.923557\t89.547582\t89.703588\t89.859594\t91.887676\t92.199688\t92.667707\t92.667707\t93.11507\t93.603744\t94.695788\t94.851794\t95.137217\t95.631825\t95.631825\t95.787832\t96.100144\t96.870486\t97.113885\t97.255657\t97.5039\t97.522779\t97.659906\t98.025999\t98.025999\t98.122292\t98.218584\t98.314877\t98.439938\t98.595944\t98.892634\t98.892634\t98.988926\t99.566683\t99.662975\t99.759268\t99.843994\t99.855561\t99.951854\t100.144439\t100.433317\t100.52961\t100.625903\t100.722195\t100.722195\t100.780031\t101.011074\t101.011074\t101.092044\t101.203659\t101.254742\t101.299952\t101.396245\t101.396245\t101.396245\t101.396245\t101.396245\t101.685123\t101.781416\t101.781416\t101.781416\t101.794072\t101.974001\t102.070294\t102.166586\t102.166586\t102.262879\t102.359172\t102.359172\t102.455465\t102.551757\t102.808112\t102.840636\t102.936928\t103.033221\t103.033221\t103.033221\t103.129514\t103.225806\t103.322099\t103.322099\t103.418392\t103.514685\t103.514685\t103.514685\t103.514685\t103.588144\t103.680863\t103.70727\t103.803563\t103.803563\t103.803563\t103.803563\t103.899856\t103.996148\t103.996148\t104.188734\t104.285026\t104.381319\t104.381319\t104.477612\t104.573905\t104.573905\t104.670197\t104.959076\t104.959076\t104.959076\t105.0117\t105.055368\t105.055368\t105.148206\t105.151661\t105.247954\t105.247954\t105.247954\t105.440539\t105.536832\t105.536832\t105.536832\t105.536832\t105.536832\t105.616225\t105.616225\t105.626275\t105.633125\t105.633125\t105.729417\t105.729417\t105.729417\t105.824284\t105.82571\t105.82571\t105.82571\t105.82571\t105.889236\t105.922003\t106.018296\t106.114588\t106.210881\t106.210881\t106.339667\t106.403467\t106.499759\t106.499759\t106.596052\t106.692345\t106.788637\t106.837186\t106.88493\t106.88493\t106.981223\t107.077516\t107.077516\t107.173808\t107.173808\t107.25429\t107.270101\t107.270101\t107.366394\t107.366394\t107.366394\t107.462687\t107.462687\t107.462687\t107.558979\t107.558979\t107.558979\t107.558979\t107.655272\t107.655272\t107.655272\t107.751565\t107.8149\t107.847857\t107.890331\t107.94415\t107.94415\t107.94415\t108.024393\t108.040443\t108.040443\t108.136736\t108.136736\t108.136736\t108.136736\t108.229329\t108.233028\t108.233028\t108.233028\t108.233028\t108.233028\t108.329321\t108.425614\t108.425614\t108.481262\t108.521907\t108.521907\t108.521907\t108.618199\t108.618199\t108.714492\t108.814353\t108.814353\t108.814353\t108.890491\t108.892356\t108.907078\t109.00337\t109.099663\t109.099663\t109.099663\t109.195956\t109.195956\t109.290671\t109.292248\t109.388541\t109.388541\t109.4\t109.484161\t109.484834\t109.581127\t109.581127\t109.581127\t109.581127\t109.581127\t109.594384\t109.677419\t109.677419\t109.753695\t109.773712\t109.773712\t109.870005\t109.870005\t109.870005\t109.966298\t109.966298\t110.000999\t110.06259\t110.06259\t110.06259\t110.06259\t110.081903\t110.158883\t110.158883\t110.255176\t110.447761\t110.471919\t110.544054\t110.736639\t110.736639\t110.929225\t110.929225\t110.929225\t110.963929\t111.025518\t111.025518\t111.12181\t111.12181\t111.155102\t111.204364\t111.218103\t111.218103\t111.218103\t111.4\t111.410688\t111.410688\t111.410688\t111.446958\t111.506981\t111.506981\t111.506981\t111.603274\t111.649544\t111.699567\t111.715562\t111.795859\t111.795859\t111.795859\t111.795859\t111.892152\t111.892152\t111.892152\t111.988445\t112.031981\t112.084738\t112.18103\t112.277323\t112.277323\t112.277323\t112.373616\t112.469909\t112.469909\t112.469909\t112.514689\t112.566201\t112.566201\t112.617005\t112.662494\t112.662494\t112.8\t112.855079\t112.951372\t112.951372\t112.951372\t112.951372\t113.047665\t113.047665\t113.144181\t113.214913\t113.263929\t113.397036\t113.427562\t113.432836\t113.432836\t113.432836\t113.432836\t113.529129\t113.529129\t113.529129\t113.529129\t113.529129\t113.592044\t113.625421\t113.625421\t113.689548\t113.689548\t113.721714\t113.721714\t113.73536\t113.8\t114.010592\t114.010592\t114.106885\t114.106885\t114.2\t114.2\t114.203178\t114.29947\t114.365011\t114.395763\t114.395763\t114.395763\t114.469579\t114.492056\t114.492056\t114.588349\t114.650954\t114.877227\t115.058733\t115.069812\t115.069812\t115.069812\t115.069812\t115.166105\t115.262398\t115.3\t115.35869\t115.35869\t115.35869\t115.454983\t115.454983\t115.499759\t115.647569\t115.7\t115.704852\t115.743861\t115.936447\t116.03274\t116.03274\t116.129032\t116.225325\t116.225325\t116.225325\t116.41791\t116.41791\t116.449035\t116.504854\t116.511447\t116.642547\t116.706789\t116.8\t117\t117.09196\t117.284545\t117.284545\t117.573423\t117.6\t117.8\t117.862301\t117.958594\t117.958594\t117.958594\t118.054887\t118.247472\t118.343765\t118.536351\t118.728936\t118.728936\t118.93752\t119.402985\t119.50892\t120.26962\t120.35225\t120.462205\t120.622568\t120.654791\t120.943669\t121.530455\t121.714011\t121.963263\t122.099182\t122.580645\t122.6\t123.076923\t123.350987\t123.350987\t123.350987\t123.680705\t123.987113\t124.410207\t124.410207\t124.5065\t125.180549\t125.180549\t125.390016\t125.56572\t125.792812\t125.950891\t126.5119\t126.624006\t126.62494\t127.119596\t127.298989\t127.587867\t127.650078\t127.68416\t128.261916\t128.421695\t128.647087\t128.748408\t128.887717\t129.610014\t129.641186\t129.642537\t129.879068\t130.265211\t131.017964\t131.188596\t131.258023\t131.469039\t131.919238\t132.134973\t132.431964\t132.449298\t132.449298\t132.605304\t132.605304\t132.76131\t133.25533\t134.477379\t134.640368\t134.987064\t135.032068\t135.101404\t135.54457\t135.546651\t135.725429\t136.193448\t136.193448\t136.817473\t137.441498\t137.441498\t137.508284\t137.75351\t138.221529\t138.221529\t138.692693\t138.774812\t139.781591\t139.781591\t140.232276\t140.517565\t140.826591\t141.029641\t141.098977\t141.240074\t141.272318\t141.618998\t141.809672\t142.312359\t144.149766\t144.565783\t145.488604\t145.603944\t145.605824\t145.952505"

    data.split("\t").map(num =>
      if ((new util.Random).nextFloat() > 0.5) {
        val plus = (new util.Random).nextFloat()
        print(num + "\t" + (num.toFloat - (num.toFloat - 84)*0.65 + plus*(1 - plus)*0.1*num.toFloat) + "\r\n")
      }
      else {
        val minus = (new util.Random).nextFloat()
        print(num + "\t" + (num.toFloat - (num.toFloat - 84)*0.65 - minus*(1 - minus)*0.1*num.toFloat) + "\r\n")
      }
    )



//    data.flatMap(_.split(" ")).map(num => if (num.toFloat > 120) {
//      if ((new util.Random).nextFloat() > 0.2) {
//        (num.toFloat - 30*(new util.Random).nextFloat()) + " "
//      } else num + " "
//    } else if (num.toFloat < 100) {
//      if ((new util.Random).nextFloat() > 0.2) {
//        (num.toFloat + 30*(new util.Random).nextFloat()) + " "
//      } else num + " "
//    } else num + " ").foreach(print)

    //吨熟料煤耗 预测图
//    data.flatMap(_.split("\\s+")).map(num => if((new util.Random).nextFloat() > 0.5){
//      if((new util.Random).nextFloat() > 0.96){
//        (num.toFloat*1000 + 0.6 + 0.8*(new util.Random).nextFloat()).toString.substring(0,7) + ","
//      }else (num.toFloat*1000 + 0.2*(new util.Random).nextFloat()).toString.substring(0,7) + ","
//    } else {
//      if((new util.Random).nextFloat() > 0.96){
//        (num.toFloat*1000 - 0.6 - 0.8*(new util.Random).nextFloat()).toString.substring(0,7) + ","
//      }else (num.toFloat*1000 - 0.2*(new util.Random).nextFloat()).toString.substring(0,7) + ","
//    }
//    ).foreach(print)

//    data.flatMap(_.split("\\s+")).map(num =>
//      (num.toFloat*1000).toString.substring(0,7) + ","
//    ).foreach(print)


    //NO预测图
//    data.flatMap(_.split("\\s+")).map(num =>
//      num + ","
//    ).foreach(print)
//    data.flatMap(_.split("\\s+")).map(num => if((new util.Random).nextFloat() > 0.5){
//      if((new util.Random).nextFloat() > 0.9){
//        (num.toFloat + 2 + 2.1*(new util.Random).nextFloat()).toString.substring(0,7) + ","
//      }else (num.toFloat + 0.8*(new util.Random).nextFloat()).toString.substring(0,7) + ","
//    } else {
//      if((new util.Random).nextFloat() > 0.9){
//        (num.toFloat - 2 - 2.1*(new util.Random).nextFloat()).toString.substring(0,7) + ","
//      }else (num.toFloat - 0.8*(new util.Random).nextFloat()).toString.substring(0,7) + ","
//    }
//    ).foreach(print)
  }
}
